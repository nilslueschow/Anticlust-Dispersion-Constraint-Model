// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// anticlustering
Rcpp::NumericVector anticlustering(int n, int k, int d_count, Rcpp::NumericVector d_sorted, Rcpp::NumericMatrix d_matrix);
RcppExport SEXP _RcppTestPackage_anticlustering(SEXP nSEXP, SEXP kSEXP, SEXP d_countSEXP, SEXP d_sortedSEXP, SEXP d_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type d_count(d_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type d_sorted(d_sortedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type d_matrix(d_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(anticlustering(n, k, d_count, d_sorted, d_matrix));
    return rcpp_result_gen;
END_RCPP
}
// solve_k_graph_coloring_anticlust
Rcpp::NumericMatrix solve_k_graph_coloring_anticlust(int selection_index, int k, int edge_count, Rcpp::NumericVector edge_table_u, Rcpp::NumericVector edge_table_v, Rcpp::NumericVector target_groups_sizes, int number_of_threads, int number_of_solutions, int symmetry_breaking);
RcppExport SEXP _RcppTestPackage_solve_k_graph_coloring_anticlust(SEXP selection_indexSEXP, SEXP kSEXP, SEXP edge_countSEXP, SEXP edge_table_uSEXP, SEXP edge_table_vSEXP, SEXP target_groups_sizesSEXP, SEXP number_of_threadsSEXP, SEXP number_of_solutionsSEXP, SEXP symmetry_breakingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type selection_index(selection_indexSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type edge_count(edge_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_u(edge_table_uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_v(edge_table_vSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target_groups_sizes(target_groups_sizesSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_threads(number_of_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_solutions(number_of_solutionsSEXP);
    Rcpp::traits::input_parameter< int >::type symmetry_breaking(symmetry_breakingSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_k_graph_coloring_anticlust(selection_index, k, edge_count, edge_table_u, edge_table_v, target_groups_sizes, number_of_threads, number_of_solutions, symmetry_breaking));
    return rcpp_result_gen;
END_RCPP
}
// solve_k_graph_coloring_simple_next_call
Rcpp::NumericMatrix solve_k_graph_coloring_simple_next_call(int selection_index, int k, int edge_count, Rcpp::NumericVector edge_table_u, Rcpp::NumericVector edge_table_v, Rcpp::NumericVector target_groups_sizes, int number_of_threads, int number_of_solutions);
RcppExport SEXP _RcppTestPackage_solve_k_graph_coloring_simple_next_call(SEXP selection_indexSEXP, SEXP kSEXP, SEXP edge_countSEXP, SEXP edge_table_uSEXP, SEXP edge_table_vSEXP, SEXP target_groups_sizesSEXP, SEXP number_of_threadsSEXP, SEXP number_of_solutionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type selection_index(selection_indexSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type edge_count(edge_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_u(edge_table_uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_v(edge_table_vSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target_groups_sizes(target_groups_sizesSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_threads(number_of_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_solutions(number_of_solutionsSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_k_graph_coloring_simple_next_call(selection_index, k, edge_count, edge_table_u, edge_table_v, target_groups_sizes, number_of_threads, number_of_solutions));
    return rcpp_result_gen;
END_RCPP
}
// solve_k_graph_coloring_repeated_next_calls_and_random_pick
Rcpp::NumericMatrix solve_k_graph_coloring_repeated_next_calls_and_random_pick(int selection_index, int k, int edge_count, Rcpp::NumericVector edge_table_u, Rcpp::NumericVector edge_table_v, Rcpp::NumericVector target_groups_sizes, int number_of_threads, int number_of_solutions, int number_of_querries);
RcppExport SEXP _RcppTestPackage_solve_k_graph_coloring_repeated_next_calls_and_random_pick(SEXP selection_indexSEXP, SEXP kSEXP, SEXP edge_countSEXP, SEXP edge_table_uSEXP, SEXP edge_table_vSEXP, SEXP target_groups_sizesSEXP, SEXP number_of_threadsSEXP, SEXP number_of_solutionsSEXP, SEXP number_of_querriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type selection_index(selection_indexSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type edge_count(edge_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_u(edge_table_uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_v(edge_table_vSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target_groups_sizes(target_groups_sizesSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_threads(number_of_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_solutions(number_of_solutionsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_querries(number_of_querriesSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_k_graph_coloring_repeated_next_calls_and_random_pick(selection_index, k, edge_count, edge_table_u, edge_table_v, target_groups_sizes, number_of_threads, number_of_solutions, number_of_querries));
    return rcpp_result_gen;
END_RCPP
}
// solve_k_graph_coloring
Rcpp::NumericVector solve_k_graph_coloring(int selection_index, int k, int edge_count, Rcpp::NumericVector edge_table_u, Rcpp::NumericVector edge_table_v, Rcpp::NumericVector target_groups_sizes, int number_of_threads, int number_of_solutions);
RcppExport SEXP _RcppTestPackage_solve_k_graph_coloring(SEXP selection_indexSEXP, SEXP kSEXP, SEXP edge_countSEXP, SEXP edge_table_uSEXP, SEXP edge_table_vSEXP, SEXP target_groups_sizesSEXP, SEXP number_of_threadsSEXP, SEXP number_of_solutionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type selection_index(selection_indexSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type edge_count(edge_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_u(edge_table_uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type edge_table_v(edge_table_vSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target_groups_sizes(target_groups_sizesSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_threads(number_of_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_solutions(number_of_solutionsSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_k_graph_coloring(selection_index, k, edge_count, edge_table_u, edge_table_v, target_groups_sizes, number_of_threads, number_of_solutions));
    return rcpp_result_gen;
END_RCPP
}
// maximize_dispersion_gecode_cpp
Rcpp::NumericMatrix maximize_dispersion_gecode_cpp(int n, int k, int d_count, Rcpp::NumericVector d_sorted, Rcpp::NumericMatrix d_matrix, Rcpp::NumericVector target_groups_sizes, double number_of_threads, int maximum_number_of_solutions);
RcppExport SEXP _RcppTestPackage_maximize_dispersion_gecode_cpp(SEXP nSEXP, SEXP kSEXP, SEXP d_countSEXP, SEXP d_sortedSEXP, SEXP d_matrixSEXP, SEXP target_groups_sizesSEXP, SEXP number_of_threadsSEXP, SEXP maximum_number_of_solutionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type d_count(d_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type d_sorted(d_sortedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type d_matrix(d_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target_groups_sizes(target_groups_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type number_of_threads(number_of_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type maximum_number_of_solutions(maximum_number_of_solutionsSEXP);
    rcpp_result_gen = Rcpp::wrap(maximize_dispersion_gecode_cpp(n, k, d_count, d_sorted, d_matrix, target_groups_sizes, number_of_threads, maximum_number_of_solutions));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppTestPackage_anticlustering", (DL_FUNC) &_RcppTestPackage_anticlustering, 5},
    {"_RcppTestPackage_solve_k_graph_coloring_anticlust", (DL_FUNC) &_RcppTestPackage_solve_k_graph_coloring_anticlust, 9},
    {"_RcppTestPackage_solve_k_graph_coloring_simple_next_call", (DL_FUNC) &_RcppTestPackage_solve_k_graph_coloring_simple_next_call, 8},
    {"_RcppTestPackage_solve_k_graph_coloring_repeated_next_calls_and_random_pick", (DL_FUNC) &_RcppTestPackage_solve_k_graph_coloring_repeated_next_calls_and_random_pick, 9},
    {"_RcppTestPackage_solve_k_graph_coloring", (DL_FUNC) &_RcppTestPackage_solve_k_graph_coloring, 8},
    {"_RcppTestPackage_maximize_dispersion_gecode_cpp", (DL_FUNC) &_RcppTestPackage_maximize_dispersion_gecode_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppTestPackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
